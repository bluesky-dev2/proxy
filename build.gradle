plugins {
    id "org.sonarqube" version "3.2.0"
}

apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'jacoco'

group = "website.magyar"
archivesBaseName = "mitm-java-proxy"
ext.componentDescription = "MITM Java Proxy"

ext.wilmaVersion=2.0
ext.myBuildNumber='SNAPSHOT'
if ( hasProperty('buildNumber') ) {
    myBuildNumber = "${project.ext.buildNumber}"
}
version = "$wilmaVersion" + ".20." + "${project.ext.myBuildNumber}"

def isSnapshot = project.version.contains('SNAPSHOT')

repositories {
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url "https://repository.mulesoft.org/nexus/content/repositories/public/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

// Source and target info
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

compileJava {
    options.encoding = "UTF-8"
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

checkstyle.toolVersion = '5.6'
checkstyle.ignoreFailures = true
checkstyle.configFile = file("$rootProject.rootDir/config/checkstyle/checkstyle.xml")
checkstyle.configProperties = ['samedir' : "$rootProject.rootDir/config/checkstyle"]

jacoco {
    toolVersion = "0.8.6"
}
jacocoTestReport {
    reports {
        xml.enabled true
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "tkohegyi_mitmJavaProxy"
        property "sonar.organization", "tkohegyi"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.checkstyle.reportPaths", "build/reports/checkstyle/main.xml"
    }
}
//project.tasks["sonarqube"].onlyIf { project.hasProperty('systemProp.sonar.login') }

test {
//    jvmArgs '-Djavax.net.debug=all' // add line
    testLogging {
        events "skipped", "failed" //, "standardOut", "standardError"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        showStandardStreams = false
    }
}

test.finalizedBy jacocoTestReport

dependencies {
    implementation group: 'ch.qos.logback', name: 'logback-classic', version:'1.2.3'
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j', version:'1.7.30'
    implementation group: 'org.slf4j', name: 'jul-to-slf4j', version:'1.7.30'
    implementation group: 'org.apache.httpcomponents', name: 'httpmime', version:'4.5.13' //this includes httpclient too
    implementation group: 'org.apache.commons', name: 'commons-io', version:'1.3.2'
    implementation group: 'org.apache.ant', name: 'ant', version:'1.10.10'
    implementation group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version:'1.69' //this includes bcprov-jdk15on too
    implementation group: 'org.eclipse.jetty', name: 'jetty-io', version: '9.4.42.v20210604'
    implementation group: 'javax.servlet', name: 'servlet-api', version: '2.5'
    implementation group: 'dnsjava', name: 'dnsjava', version: '3.4.0'
    testImplementation group: 'junit', name: 'junit', version:'4.13.2'
    testImplementation group: 'com.google.guava', name: 'guava', version: '30.1.1-jre'
    testImplementation group: 'org.mockito', name: 'mockito-all', version:'1.10.19'
    testImplementation group: 'io.netty', name: 'netty-all', version: '4.1.65.Final'
    testImplementation group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.42.v20210604'
    testImplementation group: 'org.springframework', name: 'spring-core', version: '5.3.8'
}

def myCopySpec = project.copySpec {
    from(rootProject.rootDir.absolutePath + '/') {
        include 'sslSupport/cybervillainsCA.cer'
        include 'sslSupport/cybervillainsCA.jks'
    }
}

jar {
    manifest.attributes( 'Implementation-Title': "$componentDescription - V${project.version}")
    with myCopySpec
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
            pom {
                name = 'MITM HTTP/HTTPS Java Proxy'
                description = 'HTTP/HTTPS MITM Java Proxy with the possibility of intercepting and investigating/altering both requests and responses.'
                url = 'https://github.com/tkohegyi/mitmJavaProxy/wiki'
                scm {
                    connection = 'https://github.com/tkohegyi/mitmJavaProxy.git'
                    developerConnection = 'https://github.com/tkohegyi/mitmJavaProxy.git'
                    url = 'https://github.com/tkohegyi/mitmJavaProxy/'
                }
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'tkohegyi'
                        name = 'Tamas Kohegyi'
                        email = 'tkohegyi2@gmail.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def stagingRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url isSnapshot ? snapshotRepoUrl : stagingRepoUrl
            credentials {
                username = rootProject.findProperty('ossrhUsername') ?: ''
                password = rootProject.findProperty('ossrhPassword') ?: ''
            }
        }
    }
}

signing {
    required { isSnapshot }
    sign publishing.publications.mavenJava
}
