
plugins {
    id "org.sonarqube" version "3.0"
}

ext.componentDescription = "MITM Java Proxy of Wilma"

// Common local repository info
ext.myLocalRepository='file://C:/tmp/myRepo/'
ext.wilmaVersion=2.0

if ( hasProperty('localRepository') ) {
    myLocalRepository = "${project.ext.localRepository}"
}

apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'java-library'
apply plugin: 'jacoco'

group = "website.magyar"
archivesBaseName = "mitmJavaProxy"
version = "$wilmaVersion" + ".19." + "$buildNumber"

repositories {
    jcenter()
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url "https://repository.mulesoft.org/nexus/content/repositories/public/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

// Source and target info
sourceCompatibility = 1.8
targetCompatibility = 1.8

java {
//    withJavadocJar()
    withSourcesJar()
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

task sourceZip(type: Zip) {
    from 'src'
    baseName = "$archivesBaseName"
    classifier 'sources'
    extension 'jar'
}

checkstyle.toolVersion = '5.6'
checkstyle.ignoreFailures = true
checkstyle.configFile = file("$rootProject.rootDir/config/checkstyle/checkstyle.xml")
checkstyle.configProperties = ['samedir' : "$rootProject.rootDir/config/checkstyle"]

compileJava {options.encoding = "UTF-8"}

jacoco {
    toolVersion = "0.8.6"
}
jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test {
//    jvmArgs '-Djavax.net.debug=all' // add line
    testLogging {
        events "skipped", "failed" //, "standardOut", "standardError"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        showStandardStreams = false
    }
}

test.finalizedBy jacocoTestReport

dependencies {
    compile group: 'ch.qos.logback', name: 'logback-classic', version:'1.0.13'
    compile(group: 'org.slf4j', name: 'jcl-over-slf4j', version:'1.7.12')
    compile(group: 'org.slf4j', name: 'jul-to-slf4j', version:'1.7.12')
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version:'4.5.13' //this includes httpclient too
    compile group: 'org.apache.commons', name: 'commons-io', version:'1.3.2'
    compile group: 'org.apache.ant', name: 'ant', version:'1.9.4'
    compile group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version:'1.68' //this includes bcprov-jdk15on too
    compile group: 'org.eclipse.jetty', name: 'jetty-io', version: '9.4.35.v20201120'
    compile group: 'javax.servlet', name: 'servlet-api', version: '2.5'
    compile group: 'dnsjava', name: 'dnsjava', version: '3.3.1'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'com.google.guava', name: 'guava', version: '29.0-jre'
    testCompile group: 'org.mockito', name: 'mockito-all', version:'1.9.5'
    testCompile (group: 'io.netty', name: 'netty-all', version: '4.1.51.Final')
    testCompile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.31.v20200723'
    testCompile group: 'org.springframework', name: 'spring-core', version: '5.3.2'
}

def myCopySpec = project.copySpec {
    from(rootProject.rootDir.absolutePath + '/') {
        include 'sslSupport/cybervillainsCA.cer'
        include 'sslSupport/cybervillainsCA.jks'
    }
}

jar {
    manifest.attributes( 'provider': 'gradle')
    manifest.attributes( 'Implementation-Title': "$componentDescription - V$version")
    archiveName = "$archivesBaseName-$version"+'.jar'
    with myCopySpec
}

task copyJarToDistributions (type: Copy) {
    dependsOn(sourceZip)
    from("$buildDir/libs/")
	into("$buildDir/distributions")
}

task createPom {
    doLast {
        pom {
            project {
                groupId 'website.magyar.mitm'
                artifactId 'mitmJavaProxy'
            }
        }.writeTo("$buildDir/distributions/$archivesBaseName-${version}.pom")
    }
}
createPom.dependsOn(copyJarToDistributions)

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "${myLocalRepository}")
        }
    }
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'MITM HTTP/HTTPS Java Proxy'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'HTTP/HTTPS MITM Java Proxy with the possibility of intercepting and investigating/altering both requests and responses.'
                url 'https://github.com/tkohegyi/mitmJavaProxy/wiki'

                scm {
                    connection 'https://github.com/tkohegyi/mitmJavaProxy.git'
                    developerConnection 'https://github.com/tkohegyi/mitmJavaProxy.git'
                    url 'https://github.com/tkohegyi/mitmJavaProxy/tree/master/'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'tkohegyi'
                        name 'Tamas Kohegyi'
                        email 'tkohegyi2@gmail.com'
                    }
                }
            }
        }
    }
}